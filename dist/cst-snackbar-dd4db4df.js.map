{"version":3,"file":"cst-snackbar-dd4db4df.js","sources":["../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/modify-template.js","../node_modules/lit-html/lib/shady-render.js","../node_modules/lit-element/lib/updating-element.js","../node_modules/lit-element/lib/decorators.js","../node_modules/lit-element/lib/css-tag.js","../node_modules/lit-element/lit-element.js","../src/styles/cst-milligram/cst-milligram.js","../src/styles/cst-styles/cst-styles.js","../src/styles/cst-normalize/cst-normalize.js","../src/components/cst-snackbar/cst-snackbar.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign({}, element, { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function query(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign({}, element, { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => \n// Return value typed as any to prevent TypeScript from complaining that\n// standard decorator function signature does not match TypeScript decorator\n// signature\n// TODO(kschaaf): unclear why it was only failing on this decorator and not\n// the others\n((protoOrDescriptor, name) => (name !== undefined) ?\n    legacyEventOptions(options, protoOrDescriptor, name) :\n    standardEventOptions(options, protoOrDescriptor));\n//# sourceMappingURL=decorators.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        // The Closure JS Compiler does not always preserve the correct \"this\"\n        // when calling static super methods (b/137460243), so explicitly bind.\n        super.finalize.call(this);\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","import { css } from 'lit-element';\r\nconst CSTMilligram = css `\r\n  *,\r\n  *:after,\r\n  *:before {\r\n    box-sizing: inherit;\r\n  }\r\n  html {\r\n    box-sizing: border-box;\r\n    font-size: 62.5%;\r\n  }\r\n  body {\r\n    color: var(--app-hover-color);\r\n    font-family: -apple-system, system-ui, Segoe UI, Helvetica, Arial, sans-serif !important;\r\n    font-size: 1.6em;\r\n    font-weight: 300;\r\n    letter-spacing: 0.01em;\r\n    line-height: 1.6;\r\n  }\r\n  blockquote {\r\n    border-left: 0.3rem solid #d1d1d1;\r\n    margin-left: 0;\r\n    margin-right: 0;\r\n    padding: 1rem 1.5rem;\r\n  }\r\n  blockquote *:last-child {\r\n    margin-bottom: 0;\r\n  }\r\n  .button,\r\n  button,\r\n  input[type='button'],\r\n  input[type='reset'],\r\n  input[type='submit'] {\r\n    background-color: var(--app-primary-color);\r\n    border: 0.1rem solid var(--app-primary-color);\r\n    border-radius: 0.4rem;\r\n    color: #fff;\r\n    cursor: pointer;\r\n    display: inline-block;\r\n    font-size: 1rem;\r\n    font-weight: 500;\r\n    height: 48px;\r\n    line-height: 48px;\r\n    letter-spacing: normal;\r\n    padding: 0 3rem;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    text-transform: uppercase;\r\n    white-space: nowrap;\r\n  }\r\n  .button:focus,\r\n  .button:hover,\r\n  button:focus,\r\n  button:hover,\r\n  input[type='button']:focus,\r\n  input[type='button']:hover,\r\n  input[type='reset']:focus,\r\n  input[type='reset']:hover,\r\n  input[type='submit']:focus,\r\n  input[type='submit']:hover {\r\n    background-color: var(--app-hover-color);\r\n    border-color: var(--app-hover-color);\r\n    color: #fff;\r\n    outline: 0;\r\n  }\r\n  .button[disabled],\r\n  button[disabled],\r\n  input[type='button'][disabled],\r\n  input[type='reset'][disabled],\r\n  input[type='submit'][disabled] {\r\n    cursor: default;\r\n    opacity: 0.5;\r\n  }\r\n  .button[disabled]:focus,\r\n  .button[disabled]:hover,\r\n  button[disabled]:focus,\r\n  button[disabled]:hover,\r\n  input[type='button'][disabled]:focus,\r\n  input[type='button'][disabled]:hover,\r\n  input[type='reset'][disabled]:focus,\r\n  input[type='reset'][disabled]:hover,\r\n  input[type='submit'][disabled]:focus,\r\n  input[type='submit'][disabled]:hover {\r\n    background-color: var(--app-primary-color);\r\n    border-color: var(--app-primary-color);\r\n  }\r\n  .button.button-outline,\r\n  button.button-outline,\r\n  input[type='button'].button-outline,\r\n  input[type='reset'].button-outline,\r\n  input[type='submit'].button-outline {\r\n    background-color: transparent;\r\n    color: var(--app-primary-color);\r\n  }\r\n  .button.button-outline:focus,\r\n  .button.button-outline:hover,\r\n  button.button-outline:focus,\r\n  button.button-outline:hover,\r\n  input[type='button'].button-outline:focus,\r\n  input[type='button'].button-outline:hover,\r\n  input[type='reset'].button-outline:focus,\r\n  input[type='reset'].button-outline:hover,\r\n  input[type='submit'].button-outline:focus,\r\n  input[type='submit'].button-outline:hover {\r\n    background-color: transparent;\r\n    border-color: var(--app-hover-color);\r\n    color: var(--app-hover-color);\r\n  }\r\n  .button:hover svg {\r\n    fill: var(--app-hover-color);\r\n  }\r\n  .button.button-outline[disabled]:focus,\r\n  .button.button-outline[disabled]:hover,\r\n  button.button-outline[disabled]:focus,\r\n  button.button-outline[disabled]:hover,\r\n  input[type='button'].button-outline[disabled]:focus,\r\n  input[type='button'].button-outline[disabled]:hover,\r\n  input[type='reset'].button-outline[disabled]:focus,\r\n  input[type='reset'].button-outline[disabled]:hover,\r\n  input[type='submit'].button-outline[disabled]:focus,\r\n  input[type='submit'].button-outline[disabled]:hover {\r\n    border-color: inherit;\r\n    color: var(--app-primary-color);\r\n  }\r\n  .button.button-clear,\r\n  button.button-clear,\r\n  input[type='button'].button-clear,\r\n  input[type='reset'].button-clear,\r\n  input[type='submit'].button-clear {\r\n    background-color: transparent;\r\n    border-color: transparent;\r\n    color: var(--app-primary-color);\r\n  }\r\n  .button.button-clear:focus,\r\n  .button.button-clear:hover,\r\n  button.button-clear:focus,\r\n  button.button-clear:hover,\r\n  input[type='button'].button-clear:focus,\r\n  input[type='button'].button-clear:hover,\r\n  input[type='reset'].button-clear:focus,\r\n  input[type='reset'].button-clear:hover,\r\n  input[type='submit'].button-clear:focus,\r\n  input[type='submit'].button-clear:hover {\r\n    background-color: transparent;\r\n    border-color: transparent;\r\n    color: var(--app-hover-color);\r\n  }\r\n  .button.button-clear[disabled]:focus,\r\n  .button.button-clear[disabled]:hover,\r\n  button.button-clear[disabled]:focus,\r\n  button.button-clear[disabled]:hover,\r\n  input[type='button'].button-clear[disabled]:focus,\r\n  input[type='button'].button-clear[disabled]:hover,\r\n  input[type='reset'].button-clear[disabled]:focus,\r\n  input[type='reset'].button-clear[disabled]:hover,\r\n  input[type='submit'].button-clear[disabled]:focus,\r\n  input[type='submit'].button-clear[disabled]:hover {\r\n    color: var(--app-primary-color);\r\n  }\r\n  code {\r\n    background: #f4f5f6;\r\n    border-radius: 0.4rem;\r\n    font-size: 86%;\r\n    margin: 0 0.2rem;\r\n    padding: 0.2rem 0.5rem;\r\n    white-space: nowrap;\r\n  }\r\n  pre {\r\n    background: #f4f5f6;\r\n    border-left: 0.3rem solid var(--app-primary-color);\r\n    overflow-y: hidden;\r\n  }\r\n  pre > code {\r\n    border-radius: 0;\r\n    display: block;\r\n    padding: 1rem 1.5rem;\r\n    white-space: pre;\r\n  }\r\n  hr {\r\n    border: 0;\r\n    border-top: 0.1rem solid #f4f5f6;\r\n    margin: 3rem 0;\r\n  }\r\n  input[type='email'],\r\n  input[type='number'],\r\n  input[type='password'],\r\n  input[type='search'],\r\n  input[type='tel'],\r\n  input[type='text'],\r\n  input[type='url'],\r\n  input[type='color'],\r\n  input[type='date'],\r\n  input[type='month'],\r\n  input[type='week'],\r\n  input[type='datetime'],\r\n  input[type='datetime-local'],\r\n  input:not([type]),\r\n  textarea,\r\n  select {\r\n    -webkit-appearance: none;\r\n    -moz-appearance: none;\r\n    appearance: none;\r\n    background-color: transparent;\r\n    border: 0.1rem solid #d1d1d1;\r\n    border-radius: 0.4rem;\r\n    box-shadow: none;\r\n    box-sizing: inherit;\r\n    height: 3.8rem;\r\n    padding: 0.6rem 1rem;\r\n    width: 100%;\r\n  }\r\n  input[type='email']:focus,\r\n  input[type='number']:focus,\r\n  input[type='password']:focus,\r\n  input[type='search']:focus,\r\n  input[type='tel']:focus,\r\n  input[type='text']:focus,\r\n  input[type='url']:focus,\r\n  input[type='color']:focus,\r\n  input[type='date']:focus,\r\n  input[type='month']:focus,\r\n  input[type='week']:focus,\r\n  input[type='datetime']:focus,\r\n  input[type='datetime-local']:focus,\r\n  input:not([type]):focus,\r\n  textarea:focus,\r\n  select:focus {\r\n    border-color: var(--app-primary-color);\r\n    outline: 0;\r\n  }\r\n  select {\r\n    background: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"14\" viewBox=\"0 0 29 14\" width=\"29\"><path fill=\"%23d1d1d1\" d=\"M9.37727 3.625l5.08154 6.93523L19.54036 3.625\"/></svg>')\r\n      center right no-repeat;\r\n    padding-right: 3rem;\r\n  }\r\n  select:focus {\r\n    background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"14\" viewBox=\"0 0 29 14\" width=\"29\"><path fill=\"%239b4dca\" d=\"M9.37727 3.625l5.08154 6.93523L19.54036 3.625\"/></svg>');\r\n  }\r\n  textarea {\r\n    min-height: 6.5rem;\r\n  }\r\n  label,\r\n  legend {\r\n    display: block;\r\n    font-size: 1.6rem;\r\n    font-weight: 700;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n  fieldset {\r\n    border-width: 0;\r\n    padding: 0;\r\n  }\r\n  input[type='checkbox'],\r\n  input[type='radio'] {\r\n    display: inline;\r\n  }\r\n  .label-inline {\r\n    display: inline-block;\r\n    font-weight: normal;\r\n    margin-left: 0.5rem;\r\n  }\r\n  .container {\r\n    margin: 0 auto;\r\n    max-width: 112rem;\r\n    padding: 0 2rem;\r\n    position: relative;\r\n    width: 100%;\r\n  }\r\n  .row {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 0;\r\n    width: 100%;\r\n  }\r\n  .row.row-no-padding {\r\n    padding: 0;\r\n  }\r\n  .row.row-no-padding > .column {\r\n    padding: 0;\r\n  }\r\n  .row.row-wrap {\r\n    flex-wrap: wrap;\r\n  }\r\n  .row.row-top {\r\n    align-items: flex-start;\r\n  }\r\n  .row.row-bottom {\r\n    align-items: flex-end;\r\n  }\r\n  .row.row-center {\r\n    align-items: center;\r\n  }\r\n  .row.row-stretch {\r\n    align-items: stretch;\r\n  }\r\n  .row.row-baseline {\r\n    align-items: baseline;\r\n  }\r\n  .row .column {\r\n    display: block;\r\n    flex: 1 1 auto;\r\n    margin-left: 0;\r\n    max-width: 100%;\r\n    width: 100%;\r\n  }\r\n  .row .column.column-offset-10 {\r\n    margin-left: 10%;\r\n  }\r\n  .row .column.column-offset-20 {\r\n    margin-left: 20%;\r\n  }\r\n  .row .column.column-offset-25 {\r\n    margin-left: 25%;\r\n  }\r\n  .row .column.column-offset-33,\r\n  .row .column.column-offset-34 {\r\n    margin-left: 33.3333%;\r\n  }\r\n  .row .column.column-offset-50 {\r\n    margin-left: 50%;\r\n  }\r\n  .row .column.column-offset-66,\r\n  .row .column.column-offset-67 {\r\n    margin-left: 66.6666%;\r\n  }\r\n  .row .column.column-offset-75 {\r\n    margin-left: 75%;\r\n  }\r\n  .row .column.column-offset-80 {\r\n    margin-left: 80%;\r\n  }\r\n  .row .column.column-offset-90 {\r\n    margin-left: 90%;\r\n  }\r\n  .row .column.column-10 {\r\n    flex: 0 0 10%;\r\n    max-width: 10%;\r\n  }\r\n  .row .column.column-20 {\r\n    flex: 0 0 20%;\r\n    max-width: 20%;\r\n  }\r\n  .row .column.column-25 {\r\n    flex: 0 0 25%;\r\n    max-width: 25%;\r\n  }\r\n  .row .column.column-33,\r\n  .row .column.column-34 {\r\n    flex: 0 0 33.3333%;\r\n    max-width: 33.3333%;\r\n  }\r\n  .row .column.column-40 {\r\n    flex: 0 0 40%;\r\n    max-width: 40%;\r\n  }\r\n  .row .column.column-50 {\r\n    flex: 0 0 50%;\r\n    max-width: 50%;\r\n  }\r\n  .row .column.column-60 {\r\n    flex: 0 0 60%;\r\n    max-width: 60%;\r\n  }\r\n  .row .column.column-66,\r\n  .row .column.column-67 {\r\n    flex: 0 0 66.6666%;\r\n    max-width: 66.6666%;\r\n  }\r\n  .row .column.column-75 {\r\n    flex: 0 0 75%;\r\n    max-width: 75%;\r\n  }\r\n  .row .column.column-80 {\r\n    flex: 0 0 80%;\r\n    max-width: 80%;\r\n  }\r\n  .row .column.column-90 {\r\n    flex: 0 0 90%;\r\n    max-width: 90%;\r\n  }\r\n  .row .column .column-top {\r\n    align-self: flex-start;\r\n  }\r\n  .row .column .column-bottom {\r\n    align-self: flex-end;\r\n  }\r\n  .row .column .column-center {\r\n    -ms-grid-row-align: center;\r\n    align-self: center;\r\n  }\r\n  @media (min-width: 40rem) {\r\n    .row {\r\n      flex-direction: row;\r\n      margin-left: -1rem;\r\n      width: calc(100% + 2rem);\r\n    }\r\n    .row .column {\r\n      margin-bottom: inherit;\r\n      padding: 0 1rem;\r\n    }\r\n  }\r\n  a {\r\n    color: var(--app-primary-color);\r\n    text-decoration: none;\r\n  }\r\n  a:focus,\r\n  a:hover {\r\n    color: var(--app-hover-color);\r\n  }\r\n  dl,\r\n  ol,\r\n  ul {\r\n    list-style: none;\r\n    margin-top: 0;\r\n    padding-left: 0;\r\n  }\r\n  dl dl,\r\n  dl ol,\r\n  dl ul,\r\n  ol dl,\r\n  ol ol,\r\n  ol ul,\r\n  ul dl,\r\n  ul ol,\r\n  ul ul {\r\n    font-size: 90%;\r\n    margin: 1.5rem 0 1.5rem 3rem;\r\n  }\r\n  ol {\r\n    list-style: decimal inside;\r\n  }\r\n  ul {\r\n    list-style: circle inside;\r\n  }\r\n  .button,\r\n  button,\r\n  dd,\r\n  dt,\r\n  li {\r\n    margin-bottom: 1rem;\r\n  }\r\n  fieldset,\r\n  input,\r\n  select,\r\n  textarea {\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  blockquote,\r\n  dl,\r\n  figure,\r\n  form,\r\n  ol,\r\n  p,\r\n  pre,\r\n  table,\r\n  ul {\r\n    margin-bottom: 2.5rem;\r\n  }\r\n  table {\r\n    border-spacing: 0;\r\n    width: 100%;\r\n  }\r\n  td,\r\n  th {\r\n    border-bottom: 0.1rem solid #e1e1e1;\r\n    padding: 1.2rem 1.5rem;\r\n    text-align: left;\r\n  }\r\n  td:first-child,\r\n  th:first-child {\r\n    padding-left: 0;\r\n  }\r\n  td:last-child,\r\n  th:last-child {\r\n    padding-right: 0;\r\n  }\r\n  b,\r\n  strong {\r\n    font-weight: bold;\r\n  }\r\n  p {\r\n    margin-top: 0;\r\n  }\r\n  h1,\r\n  h2,\r\n  h3,\r\n  h4,\r\n  h5,\r\n  h6 {\r\n    font-weight: 300;\r\n    letter-spacing: -0.1rem;\r\n    margin-bottom: 2rem;\r\n    margin-top: 0;\r\n  }\r\n  h1 {\r\n    font-size: 4.6rem;\r\n    line-height: 1.2;\r\n  }\r\n  h2 {\r\n    font-size: 3.6rem;\r\n    line-height: 1.25;\r\n  }\r\n  h3 {\r\n    font-size: 2.8rem;\r\n    line-height: 1.3;\r\n  }\r\n  h4 {\r\n    font-size: 2.2rem;\r\n    letter-spacing: -0.08rem;\r\n    line-height: 1.35;\r\n  }\r\n  h5 {\r\n    font-size: 1.8rem;\r\n    letter-spacing: -0.05rem;\r\n    line-height: 1.5;\r\n  }\r\n  h6 {\r\n    font-size: 1.6rem;\r\n    letter-spacing: 0;\r\n    line-height: 1.4;\r\n  }\r\n  img {\r\n    max-width: 100%;\r\n  }\r\n  .clearfix:after {\r\n    clear: both;\r\n    content: ' ';\r\n    display: table;\r\n  }\r\n  .float-left {\r\n    float: left;\r\n  }\r\n  .float-right {\r\n    float: right;\r\n  }\r\n`;\r\nexport { CSTMilligram, CSTMilligram as default };\r\n//# sourceMappingURL=cst-milligram.js.map","import { css } from 'lit-element';\r\nimport CSTMilligram from '../cst-milligram/cst-milligram';\r\nimport CSTNormalize from '../cst-normalize/cst-normalize';\r\nconst CSTStyles = css `\r\n  ${CSTNormalize}\r\n  ${CSTMilligram}\r\n`;\r\nexport { CSTStyles, CSTStyles as default };\r\n//# sourceMappingURL=cst-styles.js.map","import { css } from 'lit-element';\r\nconst CSTNormalize = css `\r\n  /*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */\r\n\r\n  html {\r\n    font-family: sans-serif; /* 1 */\r\n    line-height: 1.15; /* 2 */\r\n    -ms-text-size-adjust: 100%; /* 3 */\r\n    -webkit-text-size-adjust: 100%; /* 3 */\r\n  }\r\n\r\n  body {\r\n    margin: 0;\r\n  }\r\n\r\n  article,\r\n  aside,\r\n  footer,\r\n  header,\r\n  nav,\r\n  section {\r\n    display: block;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 2em;\r\n    margin: 0.67em 0;\r\n  }\r\n\r\n  figcaption,\r\n  figure,\r\n  main {\r\n    /* 1 */\r\n    display: block;\r\n  }\r\n\r\n  figure {\r\n    margin: 1em 40px;\r\n  }\r\n\r\n  hr {\r\n    box-sizing: content-box; /* 1 */\r\n    height: 0; /* 1 */\r\n    overflow: visible; /* 2 */\r\n  }\r\n\r\n  pre {\r\n    font-family: monospace, monospace; /* 1 */\r\n    font-size: 1em; /* 2 */\r\n  }\r\n\r\n  a {\r\n    background-color: transparent; /* 1 */\r\n    -webkit-text-decoration-skip: objects; /* 2 */\r\n  }\r\n\r\n  a:active,\r\n  a:hover {\r\n    outline-width: 0;\r\n  }\r\n\r\n  abbr[title] {\r\n    border-bottom: none; /* 1 */\r\n    text-decoration: underline; /* 2 */\r\n    text-decoration: underline dotted; /* 2 */\r\n  }\r\n\r\n  b,\r\n  strong {\r\n    font-weight: inherit;\r\n  }\r\n\r\n  b,\r\n  strong {\r\n    font-weight: bolder;\r\n  }\r\n\r\n  code,\r\n  kbd,\r\n  samp {\r\n    font-family: monospace, monospace; /* 1 */\r\n    font-size: 1em; /* 2 */\r\n  }\r\n\r\n  dfn {\r\n    font-style: italic;\r\n  }\r\n\r\n  mark {\r\n    background-color: #ff0;\r\n    color: #000;\r\n  }\r\n\r\n  small {\r\n    font-size: 80%;\r\n  }\r\n\r\n  sub,\r\n  sup {\r\n    font-size: 75%;\r\n    line-height: 0;\r\n    position: relative;\r\n    vertical-align: baseline;\r\n  }\r\n\r\n  sub {\r\n    bottom: -0.25em;\r\n  }\r\n\r\n  sup {\r\n    top: -0.5em;\r\n  }\r\n\r\n  / audio,\r\n  video {\r\n    display: inline-block;\r\n  }\r\n\r\n  audio:not([controls]) {\r\n    display: none;\r\n    height: 0;\r\n  }\r\n\r\n  img {\r\n    border-style: none;\r\n  }\r\n\r\n  svg:not(:root) {\r\n    overflow: hidden;\r\n  }\r\n\r\n  button,\r\n  input,\r\n  optgroup,\r\n  select,\r\n  textarea {\r\n    font-family: sans-serif; /* 1 */\r\n    font-size: 100%; /* 1 */\r\n    line-height: 1.15; /* 1 */\r\n    margin: 0; /* 2 */\r\n  }\r\n\r\n  button,\r\n  input {\r\n    /* 1 */\r\n    overflow: visible;\r\n  }\r\n\r\n  button,\r\n  select {\r\n    /* 1 */\r\n    text-transform: none;\r\n  }\r\n\r\n  button,\r\nhtml [type=\"button\"], /* 1 */\r\n[type=\"reset\"],\r\n[type=\"submit\"] {\r\n    -webkit-appearance: button; /* 2 */\r\n  }\r\n\r\n  button::-moz-focus-inner,\r\n  [type='button']::-moz-focus-inner,\r\n  [type='reset']::-moz-focus-inner,\r\n  [type='submit']::-moz-focus-inner {\r\n    border-style: none;\r\n    padding: 0;\r\n  }\r\n\r\n  button:-moz-focusring,\r\n  [type='button']:-moz-focusring,\r\n  [type='reset']:-moz-focusring,\r\n  [type='submit']:-moz-focusring {\r\n    outline: 1px dotted ButtonText;\r\n  }\r\n\r\n  fieldset {\r\n    border: 1px solid #c0c0c0;\r\n    margin: 0 2px;\r\n    padding: 0.35em 0.625em 0.75em;\r\n  }\r\n\r\n  legend {\r\n    box-sizing: border-box; /* 1 */\r\n    color: inherit; /* 2 */\r\n    display: table; /* 1 */\r\n    max-width: 100%; /* 1 */\r\n    padding: 0; /* 3 */\r\n    white-space: normal; /* 1 */\r\n  }\r\n\r\n  progress {\r\n    display: inline-block; /* 1 */\r\n    vertical-align: baseline; /* 2 */\r\n  }\r\n\r\n  textarea {\r\n    overflow: auto;\r\n  }\r\n\r\n  [type='checkbox'],\r\n  [type='radio'] {\r\n    box-sizing: border-box; /* 1 */\r\n    padding: 0; /* 2 */\r\n  }\r\n\r\n  [type='number']::-webkit-inner-spin-button,\r\n  [type='number']::-webkit-outer-spin-button {\r\n    height: auto;\r\n  }\r\n\r\n  [type='search'] {\r\n    -webkit-appearance: textfield; /* 1 */\r\n    outline-offset: -2px; /* 2 */\r\n  }\r\n\r\n  [type='search']::-webkit-search-cancel-button,\r\n  [type='search']::-webkit-search-decoration {\r\n    -webkit-appearance: none;\r\n  }\r\n\r\n  ::-webkit-file-upload-button {\r\n    -webkit-appearance: button; /* 1 */\r\n    font: inherit; /* 2 */\r\n  }\r\n\r\n  details, /* 1 */\r\nmenu {\r\n    display: block;\r\n  }\r\n\r\n  summary {\r\n    display: list-item;\r\n  }\r\n\r\n  canvas {\r\n    display: inline-block;\r\n  }\r\n\r\n  template {\r\n    display: none;\r\n  }\r\n\r\n  [hidden] {\r\n    display: none;\r\n  }\r\n`;\r\nexport { CSTNormalize, CSTNormalize as default };\r\n//# sourceMappingURL=cst-normalize.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nimport { LitElement, html, property, customElement, css } from 'lit-element';\r\nimport CSTStyles from '../../styles/cst-styles/cst-styles';\r\nexport class BasicSnackbar {\r\n    constructor() {\r\n        this._isComponent = false;\r\n    }\r\n    open(message) {\r\n        void message;\r\n        console.warn('Missing import of cst-banner');\r\n    }\r\n}\r\nexport let CSTSnackbarSingleton = new BasicSnackbar();\r\nlet CSTSnackbarElement = class CSTSnackbarElement extends LitElement {\r\n    constructor() {\r\n        super();\r\n        this.message = '';\r\n        this._isComponent = true;\r\n        if (!CSTSnackbarSingleton || !CSTSnackbarSingleton._isComponent) {\r\n            CSTSnackbarSingleton = this;\r\n        }\r\n        else {\r\n            console.warn('More than one cst-banner-element has been used in this web application, consider removing one.');\r\n        }\r\n    }\r\n    handleAnimationTimerEnd_() {\r\n        this.opening = false;\r\n        this.closing = false;\r\n    }\r\n    runNextAnimationFrame_(callback) {\r\n        cancelAnimationFrame(this._animationFrame);\r\n        this._animationFrame = requestAnimationFrame(() => {\r\n            this._animationFrame = 0;\r\n            clearTimeout(this._animationFrame);\r\n            this._animationFrame = window.setTimeout(callback, 0);\r\n        });\r\n    }\r\n    close() {\r\n        if (!this.opened) {\r\n            return;\r\n        }\r\n        cancelAnimationFrame(this._animationFrame);\r\n        this._animationFrame = 0;\r\n        this.closing = true;\r\n        this.opened = false;\r\n        this.opening = false;\r\n        clearTimeout(this._animationTimer);\r\n        this._animationTimer = window.setTimeout(() => {\r\n            this.handleAnimationTimerEnd_();\r\n        }, 75);\r\n        this._resolve();\r\n    }\r\n    open(message) {\r\n        return new Promise(resolve => {\r\n            //reset\r\n            clearTimeout(this._closeTimeoutHandle);\r\n            if (message) {\r\n                this.message = message;\r\n            }\r\n            this._resolve = resolve;\r\n            this.closing = false;\r\n            this.opened = false;\r\n            this.opening = true;\r\n            this.runNextAnimationFrame_(() => {\r\n                this.opened = true;\r\n                this._animationTimer = window.setTimeout(() => {\r\n                    this.handleAnimationTimerEnd_();\r\n                }, 150);\r\n            });\r\n        });\r\n    }\r\n    render() {\r\n        return html `\n      <section ?hidden=${!this.opened}>\n        ${this.message}\n        <a\n          class=\"button\"\n          @click=${e => {\r\n            e.preventDefault();\r\n            clearTimeout(this._closeTimeoutHandle);\r\n            this.close();\r\n        }}\n          >Ok</a\n        >\n      </section>\n    `;\r\n    }\r\n};\r\nCSTSnackbarElement.styles = css `\n    ${CSTStyles}\n    :host {\n      max-width: 280px;\n      border: 1px solid #eee;\n      border-radius: 8px;\n      padding: 16px;\n      position: absolute;\n      bottom: 16px;\n      left: 16px;\n      background-color: #fff;\n      -webkit-box-shadow: 0 2px 3px -1px rgba(0, 0, 0, 0.2), 0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12);\n      box-shadow: 0 2px 3px -1px rgba(0, 0, 0, 0.2), 0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12);\n      -webkit-box-sizing: border-box;\n      box-sizing: border-box;\n      -webkit-transform: scale(0.8);\n      -ms-transform: scale(0.8);\n      transform: scale(0.8);\n      opacity: 0;\n    }\n\n    :host([opening]),\n    :host([opened]),\n    :host([closing]) {\n      display: flex;\n    }\n\n    :host([opening]) {\n      -webkit-transition: opacity 75ms linear, -webkit-transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1);\n      transition: opacity 75ms linear, -webkit-transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1);\n      -o-transition: opacity 75ms linear, transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1);\n      transition: opacity 75ms linear, transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1);\n      transition: opacity 75ms linear, transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1);\n    }\n\n    :host([closing]) {\n      -webkit-transform: scale(1);\n      -ms-transform: scale(1);\n      transform: scale(1);\n      -webkit-transition: opacity 75ms linear;\n      -o-transition: opacity 75ms linear;\n      transition: opacity 75ms linear;\n    }\n\n    :host([opened]) {\n      -webkit-transform: scale(1);\n      -ms-transform: scale(1);\n      transform: scale(1);\n      opacity: 1;\n    }\n\n    section {\n      display: flex;\n      align-items: center;\n    }\n\n    a.button {\n      display: flex;\n      flex: 1 1 auto;\n      user-select: none;\n      padding: 8px 16px;\n      margin: 0 0 0 16px;\n      height: 16px;\n      line-height: 16px;\n    }\n  `;\r\n__decorate([\r\n    property({ type: String })\r\n], CSTSnackbarElement.prototype, \"message\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], CSTSnackbarElement.prototype, \"opened\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], CSTSnackbarElement.prototype, \"closing\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], CSTSnackbarElement.prototype, \"opening\", void 0);\r\nCSTSnackbarElement = __decorate([\r\n    customElement('cst-snackbar')\r\n], CSTSnackbarElement);\r\nexport default CSTSnackbarElement;\r\n//# sourceMappingURL=cst-snackbar.js.map"],"names":["directives","WeakMap","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","start","end","n","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","[object Object]","result","element","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","TemplateInstance","template","processor","options","__parts","this","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","TemplateResult","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","isPrimitive","value","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","v","t","setAttribute","_getValue","committer","directive","NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","single","PropertyPart","super","eventOptionsSupported","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","__options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","getTemplateElement","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","templateElement","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","querySelector","nativeShadow","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","Object","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","finalized","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","finalize","_classProperties","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","prototype","defineProperty","oldValue","_requestUpdate","configurable","enumerable","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","reject","previousUpdatePromise","res","rej","_hasConnected","performUpdate","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","_getUpdateComplete","size","_propertyToAttribute","customElement","classOrDescriptor","clazz","define","legacyCustomElement","descriptor","kind","elements","standardCustomElement","standardProperty","placement","initializer","assign","legacyProperty","proto","property","protoOrDescriptor","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","_styleSheet","replaceSync","css","reduce","acc","idx","textFromCSSResult","flattenStyles","flat","Infinity","arrayFlat","LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","hasUpdated","styleElement","templateResult","render","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","appendInto","litRender","delete","CSTStyles","CSTSnackbarSingleton","_isComponent","message","CSTSnackbarElement","opening","closing","callback","cancelAnimationFrame","_animationFrame","requestAnimationFrame","clearTimeout","setTimeout","opened","_animationTimer","handleAnimationTimerEnd_","_resolve","_closeTimeoutHandle","runNextAnimationFrame_","preventDefault","close","__decorate"],"mappings":"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"}